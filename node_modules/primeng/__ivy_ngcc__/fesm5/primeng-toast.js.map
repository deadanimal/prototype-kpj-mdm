{"version":3,"sources":["/Users/yusliadiyusof/Documents/angular/prototype-icms/node_modules/primeng/fesm5/primeng-toast.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0DAmG0D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAyBxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6CAgL2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAc/B;;;;;KAKT;;;;;;;;;;;;;;gDAOe","file":"primeng-toast.js","sourcesContent":["import { EventEmitter, NgZone, Input, Output, ViewChild, Component, ChangeDetectorRef, ContentChildren, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { MessageService, PrimeTemplate, SharedModule } from 'primeng/api';\nimport { trigger, state, style, transition, animate, query, animateChild } from '@angular/animations';\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar ToastItem = /** @class */ (function () {\n    function ToastItem(zone) {\n        this.zone = zone;\n        this.onClose = new EventEmitter();\n    }\n    ToastItem.prototype.ngAfterViewInit = function () {\n        this.initTimeout();\n    };\n    ToastItem.prototype.initTimeout = function () {\n        var _this = this;\n        if (!this.message.sticky) {\n            this.zone.runOutsideAngular(function () {\n                _this.timeout = setTimeout(function () {\n                    _this.onClose.emit({\n                        index: _this.index,\n                        message: _this.message\n                    });\n                }, _this.message.life || 3000);\n            });\n        }\n    };\n    ToastItem.prototype.clearTimeout = function () {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n        }\n    };\n    ToastItem.prototype.onMouseEnter = function () {\n        this.clearTimeout();\n    };\n    ToastItem.prototype.onMouseLeave = function () {\n        this.initTimeout();\n    };\n    ToastItem.prototype.onCloseIconClick = function (event) {\n        this.clearTimeout();\n        this.onClose.emit({\n            index: this.index,\n            message: this.message\n        });\n        event.preventDefault();\n    };\n    ToastItem.prototype.ngOnDestroy = function () {\n        this.clearTimeout();\n    };\n    ToastItem.ctorParameters = function () { return [\n        { type: NgZone }\n    ]; };\n    __decorate([\n        Input()\n    ], ToastItem.prototype, \"message\", void 0);\n    __decorate([\n        Input()\n    ], ToastItem.prototype, \"index\", void 0);\n    __decorate([\n        Input()\n    ], ToastItem.prototype, \"template\", void 0);\n    __decorate([\n        Input()\n    ], ToastItem.prototype, \"showTransformOptions\", void 0);\n    __decorate([\n        Input()\n    ], ToastItem.prototype, \"hideTransformOptions\", void 0);\n    __decorate([\n        Input()\n    ], ToastItem.prototype, \"showTransitionOptions\", void 0);\n    __decorate([\n        Input()\n    ], ToastItem.prototype, \"hideTransitionOptions\", void 0);\n    __decorate([\n        Output()\n    ], ToastItem.prototype, \"onClose\", void 0);\n    __decorate([\n        ViewChild('container')\n    ], ToastItem.prototype, \"containerViewChild\", void 0);\n    ToastItem = __decorate([\n        Component({\n            selector: 'p-toastItem',\n            template: \"\\n        <div #container [attr.id]=\\\"message.id\\\" class=\\\"ui-toast-message ui-shadow\\\" [@messageState]=\\\"{value: 'visible', params: {showTransformParams: showTransformOptions, hideTransformParams: hideTransformOptions, showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\\\"\\n            [ngClass]=\\\"{'ui-toast-message-info': message.severity == 'info','ui-toast-message-warn': message.severity == 'warn',\\n                'ui-toast-message-error': message.severity == 'error','ui-toast-message-success': message.severity == 'success'}\\\"\\n                (mouseenter)=\\\"onMouseEnter()\\\" (mouseleave)=\\\"onMouseLeave()\\\" role=\\\"alert\\\" aria-live=\\\"assertive\\\" aria-atomic=\\\"true\\\">\\n            <div class=\\\"ui-toast-message-content\\\">\\n                <a tabindex=\\\"0\\\" class=\\\"ui-toast-close-icon pi pi-times\\\" (click)=\\\"onCloseIconClick($event)\\\" (keydown.enter)=\\\"onCloseIconClick($event)\\\" *ngIf=\\\"message.closable !== false\\\"></a>\\n                <ng-container *ngIf=\\\"!template\\\">\\n                    <span class=\\\"ui-toast-icon pi\\\"\\n                        [ngClass]=\\\"{'pi-info-circle': message.severity == 'info', 'pi-exclamation-triangle': message.severity == 'warn',\\n                            'pi-times-circle': message.severity == 'error', 'pi-check' :message.severity == 'success'}\\\"></span>\\n                    <div class=\\\"ui-toast-message-text-content\\\">\\n                        <div class=\\\"ui-toast-summary\\\">{{message.summary}}</div>\\n                        <div class=\\\"ui-toast-detail\\\">{{message.detail}}</div>\\n                    </div>\\n                </ng-container>\\n                <ng-container *ngTemplateOutlet=\\\"template; context: {$implicit: message}\\\"></ng-container>\\n            </div>\\n        </div>\\n    \",\n            animations: [\n                trigger('messageState', [\n                    state('visible', style({\n                        transform: 'translateY(0)',\n                        opacity: 1\n                    })),\n                    transition('void => *', [\n                        style({ transform: '{{showTransformParams}}', opacity: 0 }),\n                        animate('{{showTransitionParams}}')\n                    ]),\n                    transition('* => void', [\n                        animate(('{{hideTransitionParams}}'), style({\n                            height: 0,\n                            opacity: 0,\n                            transform: '{{hideTransformParams}}'\n                        }))\n                    ])\n                ])\n            ]\n        })\n    ], ToastItem);\n    return ToastItem;\n}());\nvar Toast = /** @class */ (function () {\n    function Toast(messageService, cd) {\n        this.messageService = messageService;\n        this.cd = cd;\n        this.autoZIndex = true;\n        this.baseZIndex = 0;\n        this.position = 'top-right';\n        this.preventOpenDuplicates = false;\n        this.preventDuplicates = false;\n        this.showTransformOptions = 'translateY(100%)';\n        this.hideTransformOptions = 'translateY(-100%)';\n        this.showTransitionOptions = '300ms ease-out';\n        this.hideTransitionOptions = '250ms ease-in';\n        this.onClose = new EventEmitter();\n    }\n    Toast.prototype.ngOnInit = function () {\n        var _this = this;\n        this.messageSubscription = this.messageService.messageObserver.subscribe(function (messages) {\n            if (messages) {\n                if (messages instanceof Array) {\n                    var filteredMessages = messages.filter(function (m) { return _this.canAdd(m); });\n                    _this.add(filteredMessages);\n                }\n                else if (_this.canAdd(messages)) {\n                    _this.add([messages]);\n                }\n                if (_this.modal && _this.messages && _this.messages.length) {\n                    _this.enableModality();\n                }\n            }\n        });\n        this.clearSubscription = this.messageService.clearObserver.subscribe(function (key) {\n            if (key) {\n                if (_this.key === key) {\n                    _this.messages = null;\n                }\n            }\n            else {\n                _this.messages = null;\n            }\n            if (_this.modal) {\n                _this.disableModality();\n            }\n        });\n    };\n    Toast.prototype.add = function (messages) {\n        this.messages = this.messages ? __spread(this.messages, messages) : __spread(messages);\n        if (this.preventDuplicates) {\n            this.messagesArchieve = this.messagesArchieve ? __spread(this.messagesArchieve, messages) : __spread(messages);\n        }\n    };\n    Toast.prototype.canAdd = function (message) {\n        var allow = this.key === message.key;\n        if (allow && this.preventOpenDuplicates) {\n            allow = !this.containsMessage(this.messages, message);\n        }\n        if (allow && this.preventDuplicates) {\n            allow = !this.containsMessage(this.messagesArchieve, message);\n        }\n        return allow;\n    };\n    Toast.prototype.containsMessage = function (collection, message) {\n        if (!collection) {\n            return false;\n        }\n        return collection.find(function (m) {\n            return ((m.summary === message.summary) && (m.detail == message.detail) && (m.severity === message.severity));\n        }) != null;\n    };\n    Toast.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.templates.forEach(function (item) {\n            switch (item.getType()) {\n                case 'message':\n                    _this.template = item.template;\n                    break;\n                default:\n                    _this.template = item.template;\n                    break;\n            }\n        });\n    };\n    Toast.prototype.onMessageClose = function (event) {\n        this.messages.splice(event.index, 1);\n        if (this.messages.length === 0) {\n            this.disableModality();\n        }\n        this.onClose.emit({\n            message: event.message\n        });\n        this.cd.detectChanges();\n    };\n    Toast.prototype.enableModality = function () {\n        if (!this.mask) {\n            this.mask = document.createElement('div');\n            this.mask.style.zIndex = String(parseInt(this.containerViewChild.nativeElement.style.zIndex) - 1);\n            this.mask.style.display = 'block';\n            var maskStyleClass = 'ui-widget-overlay ui-dialog-mask';\n            DomHandler.addMultipleClasses(this.mask, maskStyleClass);\n            document.body.appendChild(this.mask);\n        }\n    };\n    Toast.prototype.disableModality = function () {\n        if (this.mask) {\n            document.body.removeChild(this.mask);\n            this.mask = null;\n        }\n    };\n    Toast.prototype.onAnimationStart = function (event) {\n        if (event.fromState === 'void' && this.autoZIndex) {\n            this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n    };\n    Toast.prototype.ngOnDestroy = function () {\n        if (this.messageSubscription) {\n            this.messageSubscription.unsubscribe();\n        }\n        if (this.clearSubscription) {\n            this.clearSubscription.unsubscribe();\n        }\n        this.disableModality();\n    };\n    Toast.ctorParameters = function () { return [\n        { type: MessageService },\n        { type: ChangeDetectorRef }\n    ]; };\n    __decorate([\n        Input()\n    ], Toast.prototype, \"key\", void 0);\n    __decorate([\n        Input()\n    ], Toast.prototype, \"autoZIndex\", void 0);\n    __decorate([\n        Input()\n    ], Toast.prototype, \"baseZIndex\", void 0);\n    __decorate([\n        Input()\n    ], Toast.prototype, \"style\", void 0);\n    __decorate([\n        Input()\n    ], Toast.prototype, \"styleClass\", void 0);\n    __decorate([\n        Input()\n    ], Toast.prototype, \"position\", void 0);\n    __decorate([\n        Input()\n    ], Toast.prototype, \"modal\", void 0);\n    __decorate([\n        Input()\n    ], Toast.prototype, \"preventOpenDuplicates\", void 0);\n    __decorate([\n        Input()\n    ], Toast.prototype, \"preventDuplicates\", void 0);\n    __decorate([\n        Input()\n    ], Toast.prototype, \"showTransformOptions\", void 0);\n    __decorate([\n        Input()\n    ], Toast.prototype, \"hideTransformOptions\", void 0);\n    __decorate([\n        Input()\n    ], Toast.prototype, \"showTransitionOptions\", void 0);\n    __decorate([\n        Input()\n    ], Toast.prototype, \"hideTransitionOptions\", void 0);\n    __decorate([\n        Output()\n    ], Toast.prototype, \"onClose\", void 0);\n    __decorate([\n        ViewChild('container')\n    ], Toast.prototype, \"containerViewChild\", void 0);\n    __decorate([\n        ContentChildren(PrimeTemplate)\n    ], Toast.prototype, \"templates\", void 0);\n    Toast = __decorate([\n        Component({\n            selector: 'p-toast',\n            template: \"\\n        <div #container [ngClass]=\\\"{'ui-toast ui-widget': true, \\n                'ui-toast-top-right': position === 'top-right',\\n                'ui-toast-top-left': position === 'top-left',\\n                'ui-toast-bottom-right': position === 'bottom-right',\\n                'ui-toast-bottom-left': position === 'bottom-left',\\n                'ui-toast-top-center': position === 'top-center',\\n                'ui-toast-bottom-center': position === 'bottom-center',\\n                'ui-toast-center': position === 'center'}\\\" \\n                [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <p-toastItem *ngFor=\\\"let msg of messages; let i=index\\\" [message]=\\\"msg\\\" [index]=\\\"i\\\" (onClose)=\\\"onMessageClose($event)\\\"\\n                    [template]=\\\"template\\\" @toastAnimation (@toastAnimation.start)=\\\"onAnimationStart($event)\\\" \\n                    [showTransformOptions]=\\\"showTransformOptions\\\" [hideTransformOptions]=\\\"hideTransformOptions\\\" \\n                    [showTransitionOptions]=\\\"showTransitionOptions\\\" [hideTransitionOptions]=\\\"hideTransitionOptions\\\"></p-toastItem>\\n        </div>\\n    \",\n            animations: [\n                trigger('toastAnimation', [\n                    transition(':enter, :leave', [\n                        query('@*', animateChild())\n                    ])\n                ])\n            ],\n            changeDetection: ChangeDetectionStrategy.Default\n        })\n    ], Toast);\n    return Toast;\n}());\nvar ToastModule = /** @class */ (function () {\n    function ToastModule() {\n    }\n    ToastModule = __decorate([\n        NgModule({\n            imports: [CommonModule],\n            exports: [Toast, SharedModule],\n            declarations: [Toast, ToastItem]\n        })\n    ], ToastModule);\n    return ToastModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Toast, ToastItem, ToastModule };\n"]}