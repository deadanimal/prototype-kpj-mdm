{"version":3,"sources":["/Users/yusliadiyusof/Documents/angular/tem-001-argon-angular-web/node_modules/@asymmetrik/ngx-leaflet/dist/leaflet/layers/leaflet-layer.directive.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wCAiDwC,AAIjC;;;;;;;;;;;;;;;;;;oBACuB","file":"leaflet-layer.directive.js","sourcesContent":["import { __decorate, __metadata } from \"tslib\";\nimport { Directive, EventEmitter, Input, NgZone, Output } from '@angular/core';\nimport { Layer } from 'leaflet';\nimport { LeafletDirective } from '../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../core/leaflet.directive.wrapper';\nimport { LeafletUtil } from '../core/leaflet.util';\n/**\n * Layer directive\n *\n * This directive is used to directly control a single map layer. The purpose of this directive is to\n * be used as part of a child structural directive of the map element.\n *\n */\nvar LeafletLayerDirective = /** @class */ (function () {\n    function LeafletLayerDirective(leafletDirective, zone) {\n        this.zone = zone;\n        // Layer Events\n        this.onAdd = new EventEmitter();\n        this.onRemove = new EventEmitter();\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n    }\n    LeafletLayerDirective.prototype.ngOnInit = function () {\n        // Init the map\n        this.leafletDirective.init();\n    };\n    LeafletLayerDirective.prototype.ngOnDestroy = function () {\n        this.layer.remove();\n    };\n    LeafletLayerDirective.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        if (changes['layer']) {\n            // Update the layer\n            var p_1 = changes['layer'].previousValue;\n            var n_1 = changes['layer'].currentValue;\n            this.zone.runOutsideAngular(function () {\n                if (null != p_1) {\n                    p_1.remove();\n                }\n                if (null != n_1) {\n                    _this.addLayerEventListeners(n_1);\n                    _this.leafletDirective.getMap().addLayer(n_1);\n                }\n            });\n        }\n    };\n    LeafletLayerDirective.prototype.addLayerEventListeners = function (l) {\n        var _this = this;\n        l.on('add', function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onAdd, e); });\n        l.on('remove', function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onRemove, e); });\n    };\n    __decorate([\n        Input('leafletLayer'),\n        __metadata(\"design:type\", Layer)\n    ], LeafletLayerDirective.prototype, \"layer\", void 0);\n    __decorate([\n        Output('leafletLayerAdd'),\n        __metadata(\"design:type\", Object)\n    ], LeafletLayerDirective.prototype, \"onAdd\", void 0);\n    __decorate([\n        Output('leafletLayerRemove'),\n        __metadata(\"design:type\", Object)\n    ], LeafletLayerDirective.prototype, \"onRemove\", void 0);\n    LeafletLayerDirective = __decorate([\n        Directive({\n            selector: '[leafletLayer]'\n        }),\n        __metadata(\"design:paramtypes\", [LeafletDirective, NgZone])\n    ], LeafletLayerDirective);\n    return LeafletLayerDirective;\n}());\nexport { LeafletLayerDirective };\n"]}