{"version":3,"sources":["/Users/yusliadiyusof/Documents/angular/tem-001-argon-angular-web/node_modules/@asymmetrik/ngx-leaflet/dist/leaflet/core/leaflet.directive.js"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAgVmC,AAI5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACkB","file":"leaflet.directive.js","sourcesContent":["import { __decorate, __metadata } from \"tslib\";\nimport { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, Output } from '@angular/core';\nimport { latLng, LatLng, LatLngBounds, map } from 'leaflet';\nimport { LeafletUtil } from './leaflet.util';\nvar LeafletDirective = /** @class */ (function () {\n    function LeafletDirective(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.DEFAULT_ZOOM = 1;\n        this.DEFAULT_CENTER = latLng(38.907192, -77.036871);\n        this.DEFAULT_FPZ_OPTIONS = {};\n        this.fitBoundsOptions = this.DEFAULT_FPZ_OPTIONS;\n        this.panOptions = this.DEFAULT_FPZ_OPTIONS;\n        this.zoomOptions = this.DEFAULT_FPZ_OPTIONS;\n        this.zoomPanOptions = this.DEFAULT_FPZ_OPTIONS;\n        // Default configuration\n        this.options = {};\n        // Configure callback function for the map\n        this.mapReady = new EventEmitter();\n        this.zoomChange = new EventEmitter();\n        this.centerChange = new EventEmitter();\n        // Mouse Map Events\n        this.onClick = new EventEmitter();\n        this.onDoubleClick = new EventEmitter();\n        this.onMouseDown = new EventEmitter();\n        this.onMouseUp = new EventEmitter();\n        this.onMouseMove = new EventEmitter();\n        this.onMouseOver = new EventEmitter();\n        this.onMouseOut = new EventEmitter();\n        // Map Move Events\n        this.onMapMove = new EventEmitter();\n        this.onMapMoveStart = new EventEmitter();\n        this.onMapMoveEnd = new EventEmitter();\n        // Map Zoom Events\n        this.onMapZoom = new EventEmitter();\n        this.onMapZoomStart = new EventEmitter();\n        this.onMapZoomEnd = new EventEmitter();\n        // Nothing here\n    }\n    LeafletDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        // Create the map outside of angular so the various map events don't trigger change detection\n        this.zone.runOutsideAngular(function () {\n            // Create the map with some reasonable defaults\n            _this.map = map(_this.element.nativeElement, _this.options);\n            _this.addMapEventListeners();\n        });\n        // Only setView if there is a center/zoom\n        if (null != this.center && null != this.zoom) {\n            this.setView(this.center, this.zoom);\n        }\n        // Set up all the initial settings\n        if (null != this.fitBounds) {\n            this.setFitBounds(this.fitBounds);\n        }\n        if (null != this.maxBounds) {\n            this.setMaxBounds(this.maxBounds);\n        }\n        if (null != this.minZoom) {\n            this.setMinZoom(this.minZoom);\n        }\n        if (null != this.maxZoom) {\n            this.setMaxZoom(this.maxZoom);\n        }\n        this.doResize();\n        // Fire map ready event\n        this.mapReady.emit(this.map);\n    };\n    LeafletDirective.prototype.ngOnChanges = function (changes) {\n        /*\n         * The following code is to address an issue with our (basic) implementation of\n         * zooming and panning. From our testing, it seems that a pan operation followed\n         * by a zoom operation in the same thread will interfere with eachother. The zoom\n         * operation interrupts/cancels the pan, resulting in a final center point that is\n         * inaccurate. The solution seems to be to either separate them with a timeout or\n          * to collapse them into a setView call.\n         */\n        // Zooming and Panning\n        if (changes['zoom'] && changes['center'] && null != this.zoom && null != this.center) {\n            this.setView(changes['center'].currentValue, changes['zoom'].currentValue);\n        }\n        // Set the zoom level\n        else if (changes['zoom']) {\n            this.setZoom(changes['zoom'].currentValue);\n        }\n        // Set the map center\n        else if (changes['center']) {\n            this.setCenter(changes['center'].currentValue);\n        }\n        // Other options\n        if (changes['fitBounds']) {\n            this.setFitBounds(changes['fitBounds'].currentValue);\n        }\n        if (changes['maxBounds']) {\n            this.setMaxBounds(changes['maxBounds'].currentValue);\n        }\n        if (changes['minZoom']) {\n            this.setMinZoom(changes['minZoom'].currentValue);\n        }\n        if (changes['maxZoom']) {\n            this.setMaxZoom(changes['maxZoom'].currentValue);\n        }\n    };\n    LeafletDirective.prototype.getMap = function () {\n        return this.map;\n    };\n    LeafletDirective.prototype.onResize = function () {\n        this.delayResize();\n    };\n    LeafletDirective.prototype.addMapEventListeners = function () {\n        var _this = this;\n        // Add all the pass-through mouse event handlers\n        this.map.on('click', function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onClick, e); });\n        this.map.on('dblclick', function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onDoubleClick, e); });\n        this.map.on('mousedown', function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onMouseDown, e); });\n        this.map.on('mouseup', function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onMouseUp, e); });\n        this.map.on('mouseover', function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onMouseOver, e); });\n        this.map.on('mouseout', function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onMouseOut, e); });\n        this.map.on('mousemove', function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onMouseMove, e); });\n        this.map.on('zoomstart', function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onMapZoomStart, e); });\n        this.map.on('zoom', function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onMapZoom, e); });\n        this.map.on('zoomend', function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onMapZoomEnd, e); });\n        this.map.on('movestart', function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onMapMoveStart, e); });\n        this.map.on('move', function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onMapMove, e); });\n        this.map.on('moveend', function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onMapMoveEnd, e); });\n        // Update any things for which we provide output bindings\n        this.map.on('zoomend moveend', function () {\n            var zoom = _this.map.getZoom();\n            if (zoom !== _this.zoom) {\n                _this.zoom = zoom;\n                LeafletUtil.handleEvent(_this.zone, _this.zoomChange, zoom);\n            }\n            var center = _this.map.getCenter();\n            if (null != center || null != _this.center) {\n                if (((null == center || null == _this.center) && center !== _this.center)\n                    || (center.lat !== _this.center.lat || center.lng !== _this.center.lng)) {\n                    _this.center = center;\n                    LeafletUtil.handleEvent(_this.zone, _this.centerChange, center);\n                }\n            }\n        });\n    };\n    /**\n     * Resize the map to fit it's parent container\n     */\n    LeafletDirective.prototype.doResize = function () {\n        var _this = this;\n        // Run this outside of angular so the map events stay outside of angular\n        this.zone.runOutsideAngular(function () {\n            // Invalidate the map size to trigger it to update itself\n            _this.map.invalidateSize({});\n        });\n    };\n    /**\n     * Manage a delayed resize of the component\n     */\n    LeafletDirective.prototype.delayResize = function () {\n        if (null != this.resizeTimer) {\n            clearTimeout(this.resizeTimer);\n        }\n        this.resizeTimer = setTimeout(this.doResize.bind(this), 200);\n    };\n    /**\n     * Set the view (center/zoom) all at once\n     * @param center The new center\n     * @param zoom The new zoom level\n     */\n    LeafletDirective.prototype.setView = function (center, zoom) {\n        if (this.map && null != center && null != zoom) {\n            this.map.setView(center, zoom, this.zoomPanOptions);\n        }\n    };\n    /**\n     * Set the map zoom level\n     * @param zoom the new zoom level for the map\n     */\n    LeafletDirective.prototype.setZoom = function (zoom) {\n        if (this.map && null != zoom) {\n            this.map.setZoom(zoom, this.zoomOptions);\n        }\n    };\n    /**\n     * Set the center of the map\n     * @param center the center point\n     */\n    LeafletDirective.prototype.setCenter = function (center) {\n        if (this.map && null != center) {\n            this.map.panTo(center, this.panOptions);\n        }\n    };\n    /**\n     * Fit the map to the bounds\n     * @param latLngBounds the boundary to set\n     */\n    LeafletDirective.prototype.setFitBounds = function (latLngBounds) {\n        if (this.map && null != latLngBounds) {\n            this.map.fitBounds(latLngBounds, this.fitBoundsOptions);\n        }\n    };\n    /**\n     * Set the map's max bounds\n     * @param latLngBounds the boundary to set\n     */\n    LeafletDirective.prototype.setMaxBounds = function (latLngBounds) {\n        if (this.map && null != latLngBounds) {\n            this.map.setMaxBounds(latLngBounds);\n        }\n    };\n    /**\n     * Set the map's min zoom\n     * @param number the new min zoom\n     */\n    LeafletDirective.prototype.setMinZoom = function (zoom) {\n        if (this.map && null != zoom) {\n            this.map.setMinZoom(zoom);\n        }\n    };\n    /**\n     * Set the map's min zoom\n     * @param number the new min zoom\n     */\n    LeafletDirective.prototype.setMaxZoom = function (zoom) {\n        if (this.map && null != zoom) {\n            this.map.setMaxZoom(zoom);\n        }\n    };\n    __decorate([\n        Input('leafletFitBoundsOptions'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"fitBoundsOptions\", void 0);\n    __decorate([\n        Input('leafletPanOptions'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"panOptions\", void 0);\n    __decorate([\n        Input('leafletZoomOptions'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"zoomOptions\", void 0);\n    __decorate([\n        Input('leafletZoomPanOptions'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"zoomPanOptions\", void 0);\n    __decorate([\n        Input('leafletOptions'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"options\", void 0);\n    __decorate([\n        Output('leafletMapReady'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"mapReady\", void 0);\n    __decorate([\n        Input('leafletZoom'),\n        __metadata(\"design:type\", Number)\n    ], LeafletDirective.prototype, \"zoom\", void 0);\n    __decorate([\n        Output('leafletZoomChange'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"zoomChange\", void 0);\n    __decorate([\n        Input('leafletCenter'),\n        __metadata(\"design:type\", LatLng)\n    ], LeafletDirective.prototype, \"center\", void 0);\n    __decorate([\n        Output('leafletCenterChange'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"centerChange\", void 0);\n    __decorate([\n        Input('leafletFitBounds'),\n        __metadata(\"design:type\", LatLngBounds)\n    ], LeafletDirective.prototype, \"fitBounds\", void 0);\n    __decorate([\n        Input('leafletMaxBounds'),\n        __metadata(\"design:type\", LatLngBounds)\n    ], LeafletDirective.prototype, \"maxBounds\", void 0);\n    __decorate([\n        Input('leafletMinZoom'),\n        __metadata(\"design:type\", Number)\n    ], LeafletDirective.prototype, \"minZoom\", void 0);\n    __decorate([\n        Input('leafletMaxZoom'),\n        __metadata(\"design:type\", Number)\n    ], LeafletDirective.prototype, \"maxZoom\", void 0);\n    __decorate([\n        Output('leafletClick'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"onClick\", void 0);\n    __decorate([\n        Output('leafletDoubleClick'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"onDoubleClick\", void 0);\n    __decorate([\n        Output('leafletMouseDown'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"onMouseDown\", void 0);\n    __decorate([\n        Output('leafletMouseUp'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"onMouseUp\", void 0);\n    __decorate([\n        Output('leafletMouseMove'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"onMouseMove\", void 0);\n    __decorate([\n        Output('leafletMouseOver'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"onMouseOver\", void 0);\n    __decorate([\n        Output('leafletMouseOut'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"onMouseOut\", void 0);\n    __decorate([\n        Output('leafletMapMove'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"onMapMove\", void 0);\n    __decorate([\n        Output('leafletMapMoveStart'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"onMapMoveStart\", void 0);\n    __decorate([\n        Output('leafletMapMoveEnd'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"onMapMoveEnd\", void 0);\n    __decorate([\n        Output('leafletMapZoom'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"onMapZoom\", void 0);\n    __decorate([\n        Output('leafletMapZoomStart'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"onMapZoomStart\", void 0);\n    __decorate([\n        Output('leafletMapZoomEnd'),\n        __metadata(\"design:type\", Object)\n    ], LeafletDirective.prototype, \"onMapZoomEnd\", void 0);\n    __decorate([\n        HostListener('window:resize', []),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], LeafletDirective.prototype, \"onResize\", null);\n    LeafletDirective = __decorate([\n        Directive({\n            selector: '[leaflet]'\n        }),\n        __metadata(\"design:paramtypes\", [ElementRef, NgZone])\n    ], LeafletDirective);\n    return LeafletDirective;\n}());\nexport { LeafletDirective };\n"]}