{"version":3,"sources":["/Users/yusliadiyusof/Documents/angular/prototype-icms/node_modules/primeng/fesm5/primeng-tabview.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wDA2CwD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAarC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6CA0F0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAM5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+CA0J8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAO/B;;;;;KAKX;;;;;;;;;;;;;;;;;gDAOiB","file":"primeng-tabview.js","sourcesContent":["import { EventEmitter, Input, Output, Component, ViewContainerRef, ChangeDetectorRef, ContentChildren, ElementRef, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar idx = 0;\nvar TabViewNav = /** @class */ (function () {\n    function TabViewNav() {\n        this.orientation = 'top';\n        this.onTabClick = new EventEmitter();\n        this.onTabCloseClick = new EventEmitter();\n    }\n    TabViewNav.prototype.getDefaultHeaderClass = function (tab) {\n        var styleClass = 'ui-state-default ui-corner-' + this.orientation;\n        if (tab.headerStyleClass) {\n            styleClass = styleClass + \" \" + tab.headerStyleClass;\n        }\n        return styleClass;\n    };\n    TabViewNav.prototype.clickTab = function (event, tab) {\n        this.onTabClick.emit({\n            originalEvent: event,\n            tab: tab\n        });\n    };\n    TabViewNav.prototype.clickClose = function (event, tab) {\n        this.onTabCloseClick.emit({\n            originalEvent: event,\n            tab: tab\n        });\n    };\n    __decorate([\n        Input()\n    ], TabViewNav.prototype, \"tabs\", void 0);\n    __decorate([\n        Input()\n    ], TabViewNav.prototype, \"orientation\", void 0);\n    __decorate([\n        Output()\n    ], TabViewNav.prototype, \"onTabClick\", void 0);\n    __decorate([\n        Output()\n    ], TabViewNav.prototype, \"onTabCloseClick\", void 0);\n    TabViewNav = __decorate([\n        Component({\n            selector: '[p-tabViewNav]',\n            host: {\n                '[class.ui-tabview-nav]': 'true',\n                '[class.ui-helper-reset]': 'true',\n                '[class.ui-helper-clearfix]': 'true',\n                '[class.ui-widget-header]': 'true',\n                '[class.ui-corner-all]': 'true'\n            },\n            template: \"\\n        <ng-template ngFor let-tab [ngForOf]=\\\"tabs\\\">\\n            <li [class]=\\\"getDefaultHeaderClass(tab)\\\" [ngStyle]=\\\"tab.headerStyle\\\" role=\\\"presentation\\\"\\n                [ngClass]=\\\"{'ui-tabview-selected ui-state-active': tab.selected, 'ui-state-disabled': tab.disabled}\\\"\\n                (click)=\\\"clickTab($event,tab)\\\" *ngIf=\\\"!tab.closed\\\" tabindex=\\\"0\\\" (keydown.enter)=\\\"clickTab($event,tab)\\\">\\n                <a [attr.id]=\\\"tab.id + '-label'\\\" role=\\\"tab\\\" [attr.aria-selected]=\\\"tab.selected\\\" [attr.aria-controls]=\\\"tab.id\\\" [pTooltip]=\\\"tab.tooltip\\\" [tooltipPosition]=\\\"tab.tooltipPosition\\\"\\n                    [attr.aria-selected]=\\\"tab.selected\\\" [positionStyle]=\\\"tab.tooltipPositionStyle\\\" [tooltipStyleClass]=\\\"tab.tooltipStyleClass\\\">\\n                    <ng-container *ngIf=\\\"!tab.headerTemplate\\\" >\\n                        <span class=\\\"ui-tabview-left-icon\\\" [ngClass]=\\\"tab.leftIcon\\\" *ngIf=\\\"tab.leftIcon\\\"></span>\\n                        <span class=\\\"ui-tabview-title\\\">{{tab.header}}</span>\\n                        <span class=\\\"ui-tabview-right-icon\\\" [ngClass]=\\\"tab.rightIcon\\\" *ngIf=\\\"tab.rightIcon\\\"></span>\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"tab.headerTemplate\\\">\\n                        <ng-container *ngTemplateOutlet=\\\"tab.headerTemplate\\\"></ng-container>\\n                    </ng-container>\\n                </a>\\n                <span *ngIf=\\\"tab.closable\\\" class=\\\"ui-tabview-close pi pi-times\\\" (click)=\\\"clickClose($event,tab)\\\"></span>\\n            </li>\\n        </ng-template>\\n    \"\n        })\n    ], TabViewNav);\n    return TabViewNav;\n}());\nvar TabPanel = /** @class */ (function () {\n    function TabPanel(viewContainer, cd) {\n        this.viewContainer = viewContainer;\n        this.cd = cd;\n        this.cache = true;\n        this.tooltipPosition = 'top';\n        this.tooltipPositionStyle = 'absolute';\n        this.id = \"ui-tabpanel-\" + idx++;\n    }\n    TabPanel.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.templates.forEach(function (item) {\n            switch (item.getType()) {\n                case 'header':\n                    _this.headerTemplate = item.template;\n                    break;\n                case 'content':\n                    _this.contentTemplate = item.template;\n                    break;\n                default:\n                    _this.contentTemplate = item.template;\n                    break;\n            }\n        });\n    };\n    Object.defineProperty(TabPanel.prototype, \"selected\", {\n        get: function () {\n            return this._selected;\n        },\n        set: function (val) {\n            this._selected = val;\n            if (!this.loaded) {\n                this.cd.detectChanges();\n            }\n            this.loaded = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TabPanel.prototype.ngOnDestroy = function () {\n        this.view = null;\n    };\n    TabPanel.ctorParameters = function () { return [\n        { type: ViewContainerRef },\n        { type: ChangeDetectorRef }\n    ]; };\n    __decorate([\n        Input()\n    ], TabPanel.prototype, \"header\", void 0);\n    __decorate([\n        Input()\n    ], TabPanel.prototype, \"disabled\", void 0);\n    __decorate([\n        Input()\n    ], TabPanel.prototype, \"closable\", void 0);\n    __decorate([\n        Input()\n    ], TabPanel.prototype, \"headerStyle\", void 0);\n    __decorate([\n        Input()\n    ], TabPanel.prototype, \"headerStyleClass\", void 0);\n    __decorate([\n        Input()\n    ], TabPanel.prototype, \"leftIcon\", void 0);\n    __decorate([\n        Input()\n    ], TabPanel.prototype, \"rightIcon\", void 0);\n    __decorate([\n        Input()\n    ], TabPanel.prototype, \"cache\", void 0);\n    __decorate([\n        Input()\n    ], TabPanel.prototype, \"tooltip\", void 0);\n    __decorate([\n        Input()\n    ], TabPanel.prototype, \"tooltipPosition\", void 0);\n    __decorate([\n        Input()\n    ], TabPanel.prototype, \"tooltipPositionStyle\", void 0);\n    __decorate([\n        Input()\n    ], TabPanel.prototype, \"tooltipStyleClass\", void 0);\n    __decorate([\n        ContentChildren(PrimeTemplate)\n    ], TabPanel.prototype, \"templates\", void 0);\n    __decorate([\n        Input()\n    ], TabPanel.prototype, \"selected\", null);\n    TabPanel = __decorate([\n        Component({\n            selector: 'p-tabPanel',\n            template: \"\\n        <div [attr.id]=\\\"id\\\" class=\\\"ui-tabview-panel ui-widget-content\\\" [ngClass]=\\\"{'ui-helper-hidden': !selected}\\\"\\n            role=\\\"tabpanel\\\" [attr.aria-hidden]=\\\"!selected\\\" [attr.aria-labelledby]=\\\"id + '-label'\\\" *ngIf=\\\"!closed\\\">\\n            <ng-content></ng-content>\\n            <ng-container *ngIf=\\\"contentTemplate && (cache ? loaded : selected)\\\">\\n                <ng-container *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-container>\\n            </ng-container>\\n        </div>\\n    \"\n        })\n    ], TabPanel);\n    return TabPanel;\n}());\nvar TabView = /** @class */ (function () {\n    function TabView(el) {\n        this.el = el;\n        this.orientation = 'top';\n        this.onChange = new EventEmitter();\n        this.onClose = new EventEmitter();\n        this.activeIndexChange = new EventEmitter();\n    }\n    TabView.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.initTabs();\n        this.tabPanels.changes.subscribe(function (_) {\n            _this.initTabs();\n        });\n    };\n    TabView.prototype.initTabs = function () {\n        this.tabs = this.tabPanels.toArray();\n        var selectedTab = this.findSelectedTab();\n        if (!selectedTab && this.tabs.length) {\n            if (this.activeIndex != null && this.tabs.length > this.activeIndex)\n                this.tabs[this.activeIndex].selected = true;\n            else\n                this.tabs[0].selected = true;\n        }\n    };\n    TabView.prototype.open = function (event, tab) {\n        if (tab.disabled) {\n            if (event) {\n                event.preventDefault();\n            }\n            return;\n        }\n        if (!tab.selected) {\n            var selectedTab = this.findSelectedTab();\n            if (selectedTab) {\n                selectedTab.selected = false;\n            }\n            tab.selected = true;\n            var selectedTabIndex = this.findTabIndex(tab);\n            this.preventActiveIndexPropagation = true;\n            this.activeIndexChange.emit(selectedTabIndex);\n            this.onChange.emit({ originalEvent: event, index: selectedTabIndex });\n        }\n        if (event) {\n            event.preventDefault();\n        }\n    };\n    TabView.prototype.close = function (event, tab) {\n        var _this = this;\n        if (this.controlClose) {\n            this.onClose.emit({\n                originalEvent: event,\n                index: this.findTabIndex(tab),\n                close: function () {\n                    _this.closeTab(tab);\n                }\n            });\n        }\n        else {\n            this.closeTab(tab);\n            this.onClose.emit({\n                originalEvent: event,\n                index: this.findTabIndex(tab)\n            });\n        }\n        event.stopPropagation();\n    };\n    TabView.prototype.closeTab = function (tab) {\n        if (tab.disabled) {\n            return;\n        }\n        if (tab.selected) {\n            tab.selected = false;\n            for (var i = 0; i < this.tabs.length; i++) {\n                var tabPanel = this.tabs[i];\n                if (!tabPanel.closed && !tab.disabled) {\n                    tabPanel.selected = true;\n                    break;\n                }\n            }\n        }\n        tab.closed = true;\n    };\n    TabView.prototype.findSelectedTab = function () {\n        for (var i = 0; i < this.tabs.length; i++) {\n            if (this.tabs[i].selected) {\n                return this.tabs[i];\n            }\n        }\n        return null;\n    };\n    TabView.prototype.findTabIndex = function (tab) {\n        var index = -1;\n        for (var i = 0; i < this.tabs.length; i++) {\n            if (this.tabs[i] == tab) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    };\n    TabView.prototype.getBlockableElement = function () {\n        return this.el.nativeElement.children[0];\n    };\n    Object.defineProperty(TabView.prototype, \"activeIndex\", {\n        get: function () {\n            return this._activeIndex;\n        },\n        set: function (val) {\n            this._activeIndex = val;\n            if (this.preventActiveIndexPropagation) {\n                this.preventActiveIndexPropagation = false;\n                return;\n            }\n            if (this.tabs && this.tabs.length && this._activeIndex != null && this.tabs.length > this._activeIndex) {\n                this.findSelectedTab().selected = false;\n                this.tabs[this._activeIndex].selected = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TabView.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\n    __decorate([\n        Input()\n    ], TabView.prototype, \"orientation\", void 0);\n    __decorate([\n        Input()\n    ], TabView.prototype, \"style\", void 0);\n    __decorate([\n        Input()\n    ], TabView.prototype, \"styleClass\", void 0);\n    __decorate([\n        Input()\n    ], TabView.prototype, \"controlClose\", void 0);\n    __decorate([\n        ContentChildren(TabPanel)\n    ], TabView.prototype, \"tabPanels\", void 0);\n    __decorate([\n        Output()\n    ], TabView.prototype, \"onChange\", void 0);\n    __decorate([\n        Output()\n    ], TabView.prototype, \"onClose\", void 0);\n    __decorate([\n        Output()\n    ], TabView.prototype, \"activeIndexChange\", void 0);\n    __decorate([\n        Input()\n    ], TabView.prototype, \"activeIndex\", null);\n    TabView = __decorate([\n        Component({\n            selector: 'p-tabView',\n            template: \"\\n        <div [ngClass]=\\\"'ui-tabview ui-widget ui-widget-content ui-corner-all ui-tabview-' + orientation\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <ul p-tabViewNav role=\\\"tablist\\\" *ngIf=\\\"orientation!='bottom'\\\" [tabs]=\\\"tabs\\\" [orientation]=\\\"orientation\\\"\\n                (onTabClick)=\\\"open($event.originalEvent, $event.tab)\\\" (onTabCloseClick)=\\\"close($event.originalEvent, $event.tab)\\\"></ul>\\n            <div class=\\\"ui-tabview-panels\\\">\\n                <ng-content></ng-content>\\n            </div>\\n            <ul p-tabViewNav role=\\\"tablist\\\" *ngIf=\\\"orientation=='bottom'\\\" [tabs]=\\\"tabs\\\" [orientation]=\\\"orientation\\\"\\n                (onTabClick)=\\\"open($event.originalEvent, $event.tab)\\\" (onTabCloseClick)=\\\"close($event.originalEvent, $event.tab)\\\"></ul>\\n        </div>\\n    \",\n            changeDetection: ChangeDetectionStrategy.Default\n        })\n    ], TabView);\n    return TabView;\n}());\nvar TabViewModule = /** @class */ (function () {\n    function TabViewModule() {\n    }\n    TabViewModule = __decorate([\n        NgModule({\n            imports: [CommonModule, SharedModule, TooltipModule],\n            exports: [TabView, TabPanel, TabViewNav, SharedModule],\n            declarations: [TabView, TabPanel, TabViewNav]\n        })\n    ], TabViewModule);\n    return TabViewModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TabPanel, TabView, TabViewModule, TabViewNav };\n"]}